---
title: "432 Class 18"
author: Thomas E. Love, Ph.D.
date: "2025-03-20"
format:
  revealjs: 
    theme: dark
    embed-resources: true
    self-contained: true
    slide-number: true
    footnotes-hover: true
    preview-links: auto
    date-format: iso
    logo: 432-2025-pic.png
    footer: "432 Class 18 | 2025-03-20 | <https://thomaselove.github.io/432-2025/>"
---

## Today's Agenda

- Can we fit a linear model to a count outcome?
- Selecting non-linear terms in light of Spearman $\rho^2$ 
- Fitting a Poisson regression with the `rms` package
- Checking Assumptions in Logistic Regression Models

## R Setup

```{r}
#| echo: true
#| message: false

knitr::opts_chunk$set(comment=NA)

library(janitor); library(gt); library(broom) 
library(rsample); library(yardstick)
library(car); library(here); library(conflicted)
library(countreg)        ## for rootograms
library(topmodels)       ## for rootograms
library(rms)
library(easystats)
library(tidyverse)

theme_set(theme_bw())

conflicts_prefer(dplyr::select, rms::Predict, yardstick::rmse,
                 yardstick::mae)
```

# Could we fit a linear model for a count outcome? 

## The `medicare` data from Class 1

```{r}
#| echo: true
medicare <- read_csv(here("c17/data/medicare.csv"), 
                     show_col_types = FALSE) |> 
  mutate(across(where(is_character), as_factor),
         subject = as.character(subject), 
         insurance = fct_relevel(insurance, "no", "yes"),
         logvisits = log(visits + 1)) ## needed because some have 0 visits

set.seed(432)
med_split <- initial_split(medicare, prop = 0.75)

med_train = training(med_split)
med_test = testing(med_split)
```

## The `medicare` data

```{r}
#| echo: true
medicare
```


## Reiterating the Goal

Predict `visits` using these 6 predictors...

Predictor | Description
---------: | ----------------------------------------------
`hospital` | # of hospital stays
`health`   | self-rated health (poor, average, excellent)
`chronic`  | # of chronic conditions
`sex`      | male or female
`school`   | years of education
`insurance` | subject (also) has private insurance? (yes/no)

## Linear Model for our Count Outcome

Let's fit a **linear regression** (`mod_0`: note *log* transformation) to go along with the Poisson regression (`mod_1`) we fit last time.

```{r}
#| echo: true
mod_0 <- lm(log(visits+1) ~ hospital + health + chronic + sex + school + 
              insurance, data = med_train)

mod_1 <- glm(visits ~ hospital + health + chronic + sex + school + 
               insurance, data = med_train, family = "poisson")
```

## Linear Model Coefficients?

```{r}
#| echo: true
## linear model
tidy(mod_0) |> gt() |> fmt_number(decimals = 3) |> 
  tab_options(table.font.size = 20)
```

## Poisson Model Coefficients?

```{r}
#| echo: true
## Poisson model
tidy(mod_1) |> gt() |> fmt_number(decimals = 3) |> 
  tab_options(table.font.size = 20)
```

## Linear Regression Assumptions?

```{r}
#| echo: true
par(mfrow = c(1,2)); plot(mod_0, which = 1:2)
```

## Linear Regression Assumptions?

```{r}
#| echo: true
par(mfrow = c(1,2)); plot(mod_0, which = c(3,5))
```

## Poisson Regression Plots?

```{r}
#| echo: true
par(mfrow = c(1,2)); plot(mod_1, which = 1:2)
```

## Poisson Regression Plots

```{r}
#| echo: true
par(mfrow = c(1,2)); plot(mod_1, which = c(3, 5))
```

## Rootogram for Linear Model

```{r}
rootogram(mod_0)
```

## Rootogram for Poisson Model

```{r}
rootogram(mod_1)
```


## Test Sample Results (1st 6 subjects)

Actual `visits` seen in the test sample:

```{r}
head(med_test$visits)
```

Predicted `visits` From our linear model (`mod_0`):

```{r}
#| echo: true
test_0 <- 
  exp(predict(mod_0, newdata = med_test, type.predict = "response")) - 1

head(test_0)
```

Predicted `visits` from our Poisson model (`mod_1`):

```{r}
#| echo: true
test_1 <- predict(mod_1, newdata = med_test, type = "response")

head(test_1)
```

## Test Sample Predictions

No negative predictions with either model.

```{r}
#| echo: true
describe(test_0) ## predictions from Linear fit
describe(test_1) ## predictions from Poisson fit
```

## Validation Results: These Two Models

```{r}
#| echo: true
mets <- metric_set(rsq, rmse, mae)

test_res <- bind_cols(med_test, pre_m0 = test_0, pre_m1 = test_1)

m0_sum <- mets(test_res, truth = visits, estimate = pre_m0) |>
  mutate(model = "Linear")

m1_sum <- mets(test_res, truth = visits, estimate = pre_m1) |>
  mutate(model = "Poisson") 

test_sum <- bind_rows(m0_sum, m1_sum) |>
  pivot_wider(names_from = model, values_from = .estimate)

test_sum |> select(-.estimator) |> gt() |> fmt_number(decimals = 3) |> 
  tab_options(table.font.size = 20)
```

# Selecting non-linear terms after Spearman $\rho^2$

## Spearman $\rho^2$ plot

```{r}
#| echo: true
plot(spearman2(visits ~ hospital + health + chronic + sex + school + 
               insurance, data = med_train))
```

## Reiterating the Goal

This is the order of the predictors (`chronic` highest) on the Spearman $\rho^2$ plot from the previous slide.

Predictor | Description
---------: | ----------------------------------------------
`chronic`  | # of chronic conditions (all values 0-8)
`hospital` | # of hospital stays (all values 0-8)
`health`   | self-rated health (poor, average, excellent)
`insurance` | subject (also) has private insurance? (yes/no)
`school`   | years of education
`sex`      | male or female

## What might we do?

- `chronic` is a count (all values 0-8), then a gap to...
- `hospital` also quantitative, also a count (0-8)
- `health` is a 3-category factor

We might:

- include a restricted cubic spline with 4-5 knots in `chronic`
- include a rcs with fewer knots in `hospital`
- include an interaction between `health` and `chronic` or perhaps `health` and `hospital`


## Could we build an `ols()` fit?

Splines sometimes crash with discrete predictors (like counts.)

- For these data, it turns out that even a 3-knot spline in `hospital` fails (if we already have the four-knot spline in `chronic`), but the `ols()` function will let us add both interactions we're considering.

```{r}
#| echo: true
d <- datadist(medicare); options(datadist = "d")

mod_toobig <- ols(log(visits + 1) ~ 
                 rcs(chronic, 4) + hospital * health + 
                 chronic %ia% health +
                 sex + school + insurance, data = med_train)
```

## Why is this model "too big"?

```{r}
#| echo: true
mod_toobig
```


## Uh, oh.

```{r}
#| echo: true
#| fig-height: 7

plot(nomogram(mod_toobig, fun = exp, funlabel = "Visits + 1"))
```

## A more reasonable option?

```{r}
#| echo: true
d <- datadist(medicare); options(datadist = "d")

mod_new <- ols(log(visits + 1) ~ 
                 rcs(chronic, 4) + hospital + health + 
                 chronic %ia% health +
                 sex + school + insurance, data = med_train)
```

## What does this `mod_new` show?

```{r}
#| echo: true
mod_new
```

## How many df did we add here?

```{r}
#| echo: true
anova(mod_new)
```


## What does this `ols()` fit look like?

```{r}
#| echo: true

plot(summary(mod_new))
```


## What does this `ols()` fit look like?

```{r}
ggplot(Predict(mod_new))
```

## How's the nomogram?

```{r}
#| echo: true
#| fig-height: 7

plot(nomogram(mod_new, fun = exp, funlabel = "Visits + 1"))
```

# Can we fit a Poisson model with a function from `rms`?


## The `Glm()` function in `rms`

```{r}
#| echo: true
d <- datadist(medicare); options(datadist = "d")

mod_1_Glm <- Glm(visits ~ hospital + health + chronic + sex + school + 
               insurance, data = med_train, family = poisson())
```

and we could have used `rcs()` or polynomials or interactions if we wanted to do so.

Complete and updated documentation for the `rms` package is found at <https://hbiostat.org/r/rms/>. 

### Does a `Glm()` fit do everything we are used to?

- Nope. No `validate()` or `calibrate()` methods exist.

## What's in `mod_1_Glm`?

```{r}
#| echo: true
mod_1_Glm
```

## What can we do: `mod_1_Glm`?

```{r}
#| echo: true
plot(summary(mod_1_Glm))
```

## What can we do: `mod_1_Glm`?

```{r}
#| echo: true
summary(mod_1_Glm)
```

## What can we do: `mod_1_Glm`?

```{r}
#| echo: true
ggplot(Predict(mod_1_Glm))
```

---

```{r}
#| echo: true
#| fig-height: 7
plot(nomogram(mod_1_Glm, fun = exp, funlabel = "Visits",
              fun.at = c(1, 2, 3, 4, 5, 10, 15, 20, 25, 30)))
```


